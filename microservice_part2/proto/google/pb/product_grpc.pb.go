// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: product.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProductService_ProductList_FullMethodName          = "/ProductService/ProductList"
	ProductService_BatchGetProduct_FullMethodName      = "/ProductService/BatchGetProduct"
	ProductService_CreateProduct_FullMethodName        = "/ProductService/CreateProduct"
	ProductService_DeleteProduct_FullMethodName        = "/ProductService/DeleteProduct"
	ProductService_UpdateProduct_FullMethodName        = "/ProductService/UpdateProduct"
	ProductService_GetProductDetail_FullMethodName     = "/ProductService/GetProductDetail"
	ProductService_GetAllCategoryList_FullMethodName   = "/ProductService/GetAllCategoryList"
	ProductService_GetSubCategory_FullMethodName       = "/ProductService/GetSubCategory"
	ProductService_CreateCategory_FullMethodName       = "/ProductService/CreateCategory"
	ProductService_DeleteCategory_FullMethodName       = "/ProductService/DeleteCategory"
	ProductService_UpdateCategory_FullMethodName       = "/ProductService/UpdateCategory"
	ProductService_BrandList_FullMethodName            = "/ProductService/BrandList"
	ProductService_CreateBrand_FullMethodName          = "/ProductService/CreateBrand"
	ProductService_DeleteBrand_FullMethodName          = "/ProductService/DeleteBrand"
	ProductService_UpdateBrand_FullMethodName          = "/ProductService/UpdateBrand"
	ProductService_AdvertiseLIst_FullMethodName        = "/ProductService/AdvertiseLIst"
	ProductService_CreateAdvertise_FullMethodName      = "/ProductService/CreateAdvertise"
	ProductService_DeleteAdvertise_FullMethodName      = "/ProductService/DeleteAdvertise"
	ProductService_UpdateAdvertise_FullMethodName      = "/ProductService/UpdateAdvertise"
	ProductService_CategoryBrandList_FullMethodName    = "/ProductService/CategoryBrandList"
	ProductService_GetCategoryBrandList_FullMethodName = "/ProductService/GetCategoryBrandList"
	ProductService_CreateCategoryBrand_FullMethodName  = "/ProductService/CreateCategoryBrand"
	ProductService_DeleteCategoryBrand_FullMethodName  = "/ProductService/DeleteCategoryBrand"
	ProductService_UpdateCategoryBrand_FullMethodName  = "/ProductService/UpdateCategoryBrand"
)

// ProductServiceClient is the client API for ProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductServiceClient interface {
	// 产品：
	ProductList(ctx context.Context, in *ProductionConditionReq, opts ...grpc.CallOption) (*ProductRes, error)
	// Get By ID
	BatchGetProduct(ctx context.Context, in *BatchProductIdReq, opts ...grpc.CallOption) (*ProductRes, error)
	// Create
	CreateProduct(ctx context.Context, in *CreateProductItem, opts ...grpc.CallOption) (*ProductItemRes, error)
	DeleteProduct(ctx context.Context, in *DeleteProductItem, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateProduct(ctx context.Context, in *CreateProductItem, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetProductDetail(ctx context.Context, in *ProductItemReq, opts ...grpc.CallOption) (*ProductItemRes, error)
	// 产品分类：
	GetAllCategoryList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CategoriesRes, error)
	GetSubCategory(ctx context.Context, in *CategoriesReq, opts ...grpc.CallOption) (*SubCategoriesRes, error)
	CreateCategory(ctx context.Context, in *CategoryItemReq, opts ...grpc.CallOption) (*CategoryItemRes, error)
	DeleteCategory(ctx context.Context, in *CategoryDelReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateCategory(ctx context.Context, in *CategoryItemReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 品牌
	BrandList(ctx context.Context, in *BrandPagingReq, opts ...grpc.CallOption) (*BrandRes, error)
	CreateBrand(ctx context.Context, in *BrandItemReq, opts ...grpc.CallOption) (*BrandItemRes, error)
	DeleteBrand(ctx context.Context, in *BrandItemReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateBrand(ctx context.Context, in *BrandItemReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 广告
	AdvertiseLIst(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AdvertiseRes, error)
	CreateAdvertise(ctx context.Context, in *AdvertiseReq, opts ...grpc.CallOption) (*AdvertiseItemRes, error)
	DeleteAdvertise(ctx context.Context, in *AdvertiseReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateAdvertise(ctx context.Context, in *AdvertiseReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 品牌分类
	CategoryBrandList(ctx context.Context, in *PagingReq, opts ...grpc.CallOption) (*CateGoryBrandListRes, error)
	GetCategoryBrandList(ctx context.Context, in *CategoryItemReq, opts ...grpc.CallOption) (*BrandItemRes, error)
	CreateCategoryBrand(ctx context.Context, in *CategoryBrandReq, opts ...grpc.CallOption) (*CategoryBrandRes, error)
	DeleteCategoryBrand(ctx context.Context, in *CategoryBrandReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateCategoryBrand(ctx context.Context, in *CategoryBrandReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type productServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductServiceClient(cc grpc.ClientConnInterface) ProductServiceClient {
	return &productServiceClient{cc}
}

func (c *productServiceClient) ProductList(ctx context.Context, in *ProductionConditionReq, opts ...grpc.CallOption) (*ProductRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductRes)
	err := c.cc.Invoke(ctx, ProductService_ProductList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) BatchGetProduct(ctx context.Context, in *BatchProductIdReq, opts ...grpc.CallOption) (*ProductRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductRes)
	err := c.cc.Invoke(ctx, ProductService_BatchGetProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateProduct(ctx context.Context, in *CreateProductItem, opts ...grpc.CallOption) (*ProductItemRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductItemRes)
	err := c.cc.Invoke(ctx, ProductService_CreateProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteProduct(ctx context.Context, in *DeleteProductItem, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProductService_DeleteProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateProduct(ctx context.Context, in *CreateProductItem, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProductService_UpdateProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetProductDetail(ctx context.Context, in *ProductItemReq, opts ...grpc.CallOption) (*ProductItemRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductItemRes)
	err := c.cc.Invoke(ctx, ProductService_GetProductDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetAllCategoryList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CategoriesRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CategoriesRes)
	err := c.cc.Invoke(ctx, ProductService_GetAllCategoryList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetSubCategory(ctx context.Context, in *CategoriesReq, opts ...grpc.CallOption) (*SubCategoriesRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubCategoriesRes)
	err := c.cc.Invoke(ctx, ProductService_GetSubCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateCategory(ctx context.Context, in *CategoryItemReq, opts ...grpc.CallOption) (*CategoryItemRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CategoryItemRes)
	err := c.cc.Invoke(ctx, ProductService_CreateCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteCategory(ctx context.Context, in *CategoryDelReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProductService_DeleteCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateCategory(ctx context.Context, in *CategoryItemReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProductService_UpdateCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) BrandList(ctx context.Context, in *BrandPagingReq, opts ...grpc.CallOption) (*BrandRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BrandRes)
	err := c.cc.Invoke(ctx, ProductService_BrandList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateBrand(ctx context.Context, in *BrandItemReq, opts ...grpc.CallOption) (*BrandItemRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BrandItemRes)
	err := c.cc.Invoke(ctx, ProductService_CreateBrand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteBrand(ctx context.Context, in *BrandItemReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProductService_DeleteBrand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateBrand(ctx context.Context, in *BrandItemReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProductService_UpdateBrand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) AdvertiseLIst(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AdvertiseRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdvertiseRes)
	err := c.cc.Invoke(ctx, ProductService_AdvertiseLIst_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateAdvertise(ctx context.Context, in *AdvertiseReq, opts ...grpc.CallOption) (*AdvertiseItemRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdvertiseItemRes)
	err := c.cc.Invoke(ctx, ProductService_CreateAdvertise_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteAdvertise(ctx context.Context, in *AdvertiseReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProductService_DeleteAdvertise_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateAdvertise(ctx context.Context, in *AdvertiseReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProductService_UpdateAdvertise_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CategoryBrandList(ctx context.Context, in *PagingReq, opts ...grpc.CallOption) (*CateGoryBrandListRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CateGoryBrandListRes)
	err := c.cc.Invoke(ctx, ProductService_CategoryBrandList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetCategoryBrandList(ctx context.Context, in *CategoryItemReq, opts ...grpc.CallOption) (*BrandItemRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BrandItemRes)
	err := c.cc.Invoke(ctx, ProductService_GetCategoryBrandList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateCategoryBrand(ctx context.Context, in *CategoryBrandReq, opts ...grpc.CallOption) (*CategoryBrandRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CategoryBrandRes)
	err := c.cc.Invoke(ctx, ProductService_CreateCategoryBrand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteCategoryBrand(ctx context.Context, in *CategoryBrandReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProductService_DeleteCategoryBrand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateCategoryBrand(ctx context.Context, in *CategoryBrandReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProductService_UpdateCategoryBrand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServiceServer is the server API for ProductService service.
// All implementations must embed UnimplementedProductServiceServer
// for forward compatibility.
type ProductServiceServer interface {
	// 产品：
	ProductList(context.Context, *ProductionConditionReq) (*ProductRes, error)
	// Get By ID
	BatchGetProduct(context.Context, *BatchProductIdReq) (*ProductRes, error)
	// Create
	CreateProduct(context.Context, *CreateProductItem) (*ProductItemRes, error)
	DeleteProduct(context.Context, *DeleteProductItem) (*emptypb.Empty, error)
	UpdateProduct(context.Context, *CreateProductItem) (*emptypb.Empty, error)
	GetProductDetail(context.Context, *ProductItemReq) (*ProductItemRes, error)
	// 产品分类：
	GetAllCategoryList(context.Context, *emptypb.Empty) (*CategoriesRes, error)
	GetSubCategory(context.Context, *CategoriesReq) (*SubCategoriesRes, error)
	CreateCategory(context.Context, *CategoryItemReq) (*CategoryItemRes, error)
	DeleteCategory(context.Context, *CategoryDelReq) (*emptypb.Empty, error)
	UpdateCategory(context.Context, *CategoryItemReq) (*emptypb.Empty, error)
	// 品牌
	BrandList(context.Context, *BrandPagingReq) (*BrandRes, error)
	CreateBrand(context.Context, *BrandItemReq) (*BrandItemRes, error)
	DeleteBrand(context.Context, *BrandItemReq) (*emptypb.Empty, error)
	UpdateBrand(context.Context, *BrandItemReq) (*emptypb.Empty, error)
	// 广告
	AdvertiseLIst(context.Context, *emptypb.Empty) (*AdvertiseRes, error)
	CreateAdvertise(context.Context, *AdvertiseReq) (*AdvertiseItemRes, error)
	DeleteAdvertise(context.Context, *AdvertiseReq) (*emptypb.Empty, error)
	UpdateAdvertise(context.Context, *AdvertiseReq) (*emptypb.Empty, error)
	// 品牌分类
	CategoryBrandList(context.Context, *PagingReq) (*CateGoryBrandListRes, error)
	GetCategoryBrandList(context.Context, *CategoryItemReq) (*BrandItemRes, error)
	CreateCategoryBrand(context.Context, *CategoryBrandReq) (*CategoryBrandRes, error)
	DeleteCategoryBrand(context.Context, *CategoryBrandReq) (*emptypb.Empty, error)
	UpdateCategoryBrand(context.Context, *CategoryBrandReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedProductServiceServer()
}

// UnimplementedProductServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductServiceServer struct{}

func (UnimplementedProductServiceServer) ProductList(context.Context, *ProductionConditionReq) (*ProductRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductList not implemented")
}
func (UnimplementedProductServiceServer) BatchGetProduct(context.Context, *BatchProductIdReq) (*ProductRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetProduct not implemented")
}
func (UnimplementedProductServiceServer) CreateProduct(context.Context, *CreateProductItem) (*ProductItemRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedProductServiceServer) DeleteProduct(context.Context, *DeleteProductItem) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (UnimplementedProductServiceServer) UpdateProduct(context.Context, *CreateProductItem) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (UnimplementedProductServiceServer) GetProductDetail(context.Context, *ProductItemReq) (*ProductItemRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductDetail not implemented")
}
func (UnimplementedProductServiceServer) GetAllCategoryList(context.Context, *emptypb.Empty) (*CategoriesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCategoryList not implemented")
}
func (UnimplementedProductServiceServer) GetSubCategory(context.Context, *CategoriesReq) (*SubCategoriesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubCategory not implemented")
}
func (UnimplementedProductServiceServer) CreateCategory(context.Context, *CategoryItemReq) (*CategoryItemRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategory not implemented")
}
func (UnimplementedProductServiceServer) DeleteCategory(context.Context, *CategoryDelReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategory not implemented")
}
func (UnimplementedProductServiceServer) UpdateCategory(context.Context, *CategoryItemReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategory not implemented")
}
func (UnimplementedProductServiceServer) BrandList(context.Context, *BrandPagingReq) (*BrandRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BrandList not implemented")
}
func (UnimplementedProductServiceServer) CreateBrand(context.Context, *BrandItemReq) (*BrandItemRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBrand not implemented")
}
func (UnimplementedProductServiceServer) DeleteBrand(context.Context, *BrandItemReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBrand not implemented")
}
func (UnimplementedProductServiceServer) UpdateBrand(context.Context, *BrandItemReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBrand not implemented")
}
func (UnimplementedProductServiceServer) AdvertiseLIst(context.Context, *emptypb.Empty) (*AdvertiseRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdvertiseLIst not implemented")
}
func (UnimplementedProductServiceServer) CreateAdvertise(context.Context, *AdvertiseReq) (*AdvertiseItemRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAdvertise not implemented")
}
func (UnimplementedProductServiceServer) DeleteAdvertise(context.Context, *AdvertiseReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAdvertise not implemented")
}
func (UnimplementedProductServiceServer) UpdateAdvertise(context.Context, *AdvertiseReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdvertise not implemented")
}
func (UnimplementedProductServiceServer) CategoryBrandList(context.Context, *PagingReq) (*CateGoryBrandListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CategoryBrandList not implemented")
}
func (UnimplementedProductServiceServer) GetCategoryBrandList(context.Context, *CategoryItemReq) (*BrandItemRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryBrandList not implemented")
}
func (UnimplementedProductServiceServer) CreateCategoryBrand(context.Context, *CategoryBrandReq) (*CategoryBrandRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategoryBrand not implemented")
}
func (UnimplementedProductServiceServer) DeleteCategoryBrand(context.Context, *CategoryBrandReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategoryBrand not implemented")
}
func (UnimplementedProductServiceServer) UpdateCategoryBrand(context.Context, *CategoryBrandReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategoryBrand not implemented")
}
func (UnimplementedProductServiceServer) mustEmbedUnimplementedProductServiceServer() {}
func (UnimplementedProductServiceServer) testEmbeddedByValue()                        {}

// UnsafeProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServiceServer will
// result in compilation errors.
type UnsafeProductServiceServer interface {
	mustEmbedUnimplementedProductServiceServer()
}

func RegisterProductServiceServer(s grpc.ServiceRegistrar, srv ProductServiceServer) {
	// If the following call pancis, it indicates UnimplementedProductServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductService_ServiceDesc, srv)
}

func _ProductService_ProductList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductionConditionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ProductList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_ProductList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ProductList(ctx, req.(*ProductionConditionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_BatchGetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchProductIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).BatchGetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_BatchGetProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).BatchGetProduct(ctx, req.(*BatchProductIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_CreateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateProduct(ctx, req.(*CreateProductItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_DeleteProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteProduct(ctx, req.(*DeleteProductItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_UpdateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateProduct(ctx, req.(*CreateProductItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetProductDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetProductDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetProductDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetProductDetail(ctx, req.(*ProductItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetAllCategoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetAllCategoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetAllCategoryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetAllCategoryList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetSubCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoriesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetSubCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetSubCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetSubCategory(ctx, req.(*CategoriesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_CreateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateCategory(ctx, req.(*CategoryItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_DeleteCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteCategory(ctx, req.(*CategoryDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_UpdateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateCategory(ctx, req.(*CategoryItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_BrandList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandPagingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).BrandList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_BrandList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).BrandList(ctx, req.(*BrandPagingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CreateBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_CreateBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateBrand(ctx, req.(*BrandItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_DeleteBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteBrand(ctx, req.(*BrandItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_UpdateBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateBrand(ctx, req.(*BrandItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_AdvertiseLIst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).AdvertiseLIst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_AdvertiseLIst_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).AdvertiseLIst(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CreateAdvertise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdvertiseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateAdvertise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_CreateAdvertise_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateAdvertise(ctx, req.(*AdvertiseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteAdvertise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdvertiseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteAdvertise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_DeleteAdvertise_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteAdvertise(ctx, req.(*AdvertiseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateAdvertise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdvertiseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateAdvertise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_UpdateAdvertise_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateAdvertise(ctx, req.(*AdvertiseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CategoryBrandList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PagingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CategoryBrandList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_CategoryBrandList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CategoryBrandList(ctx, req.(*PagingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetCategoryBrandList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetCategoryBrandList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetCategoryBrandList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetCategoryBrandList(ctx, req.(*CategoryItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CreateCategoryBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryBrandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateCategoryBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_CreateCategoryBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateCategoryBrand(ctx, req.(*CategoryBrandReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteCategoryBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryBrandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteCategoryBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_DeleteCategoryBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteCategoryBrand(ctx, req.(*CategoryBrandReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateCategoryBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryBrandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateCategoryBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_UpdateCategoryBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateCategoryBrand(ctx, req.(*CategoryBrandReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductService_ServiceDesc is the grpc.ServiceDesc for ProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ProductService",
	HandlerType: (*ProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProductList",
			Handler:    _ProductService_ProductList_Handler,
		},
		{
			MethodName: "BatchGetProduct",
			Handler:    _ProductService_BatchGetProduct_Handler,
		},
		{
			MethodName: "CreateProduct",
			Handler:    _ProductService_CreateProduct_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _ProductService_DeleteProduct_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _ProductService_UpdateProduct_Handler,
		},
		{
			MethodName: "GetProductDetail",
			Handler:    _ProductService_GetProductDetail_Handler,
		},
		{
			MethodName: "GetAllCategoryList",
			Handler:    _ProductService_GetAllCategoryList_Handler,
		},
		{
			MethodName: "GetSubCategory",
			Handler:    _ProductService_GetSubCategory_Handler,
		},
		{
			MethodName: "CreateCategory",
			Handler:    _ProductService_CreateCategory_Handler,
		},
		{
			MethodName: "DeleteCategory",
			Handler:    _ProductService_DeleteCategory_Handler,
		},
		{
			MethodName: "UpdateCategory",
			Handler:    _ProductService_UpdateCategory_Handler,
		},
		{
			MethodName: "BrandList",
			Handler:    _ProductService_BrandList_Handler,
		},
		{
			MethodName: "CreateBrand",
			Handler:    _ProductService_CreateBrand_Handler,
		},
		{
			MethodName: "DeleteBrand",
			Handler:    _ProductService_DeleteBrand_Handler,
		},
		{
			MethodName: "UpdateBrand",
			Handler:    _ProductService_UpdateBrand_Handler,
		},
		{
			MethodName: "AdvertiseLIst",
			Handler:    _ProductService_AdvertiseLIst_Handler,
		},
		{
			MethodName: "CreateAdvertise",
			Handler:    _ProductService_CreateAdvertise_Handler,
		},
		{
			MethodName: "DeleteAdvertise",
			Handler:    _ProductService_DeleteAdvertise_Handler,
		},
		{
			MethodName: "UpdateAdvertise",
			Handler:    _ProductService_UpdateAdvertise_Handler,
		},
		{
			MethodName: "CategoryBrandList",
			Handler:    _ProductService_CategoryBrandList_Handler,
		},
		{
			MethodName: "GetCategoryBrandList",
			Handler:    _ProductService_GetCategoryBrandList_Handler,
		},
		{
			MethodName: "CreateCategoryBrand",
			Handler:    _ProductService_CreateCategoryBrand_Handler,
		},
		{
			MethodName: "DeleteCategoryBrand",
			Handler:    _ProductService_DeleteCategoryBrand_Handler,
		},
		{
			MethodName: "UpdateCategoryBrand",
			Handler:    _ProductService_UpdateCategoryBrand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product.proto",
}
