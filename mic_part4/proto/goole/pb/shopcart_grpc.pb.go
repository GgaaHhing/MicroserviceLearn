// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: shopcart.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShopCartService_ShopCartItemList_FullMethodName   = "/pb.ShopCartService/ShopCartItemList"
	ShopCartService_AddShopCartItem_FullMethodName    = "/pb.ShopCartService/AddShopCartItem"
	ShopCartService_DeleteShopCart_FullMethodName     = "/pb.ShopCartService/DeleteShopCart"
	ShopCartService_UpdateShopCartItem_FullMethodName = "/pb.ShopCartService/UpdateShopCartItem"
)

// ShopCartServiceClient is the client API for ShopCartService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShopCartServiceClient interface {
	// 展示
	ShopCartItemList(ctx context.Context, in *AccountReq, opts ...grpc.CallOption) (*CartItemListRes, error)
	// 添加
	AddShopCartItem(ctx context.Context, in *ShopCartReq, opts ...grpc.CallOption) (*CartItemRes, error)
	// 删除
	DeleteShopCart(ctx context.Context, in *DelShopCartItem, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 更新
	UpdateShopCartItem(ctx context.Context, in *ShopCartReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type shopCartServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShopCartServiceClient(cc grpc.ClientConnInterface) ShopCartServiceClient {
	return &shopCartServiceClient{cc}
}

func (c *shopCartServiceClient) ShopCartItemList(ctx context.Context, in *AccountReq, opts ...grpc.CallOption) (*CartItemListRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CartItemListRes)
	err := c.cc.Invoke(ctx, ShopCartService_ShopCartItemList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopCartServiceClient) AddShopCartItem(ctx context.Context, in *ShopCartReq, opts ...grpc.CallOption) (*CartItemRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CartItemRes)
	err := c.cc.Invoke(ctx, ShopCartService_AddShopCartItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopCartServiceClient) DeleteShopCart(ctx context.Context, in *DelShopCartItem, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ShopCartService_DeleteShopCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopCartServiceClient) UpdateShopCartItem(ctx context.Context, in *ShopCartReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ShopCartService_UpdateShopCartItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShopCartServiceServer is the server API for ShopCartService service.
// All implementations must embed UnimplementedShopCartServiceServer
// for forward compatibility.
type ShopCartServiceServer interface {
	// 展示
	ShopCartItemList(context.Context, *AccountReq) (*CartItemListRes, error)
	// 添加
	AddShopCartItem(context.Context, *ShopCartReq) (*CartItemRes, error)
	// 删除
	DeleteShopCart(context.Context, *DelShopCartItem) (*emptypb.Empty, error)
	// 更新
	UpdateShopCartItem(context.Context, *ShopCartReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedShopCartServiceServer()
}

// UnimplementedShopCartServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShopCartServiceServer struct{}

func (UnimplementedShopCartServiceServer) ShopCartItemList(context.Context, *AccountReq) (*CartItemListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShopCartItemList not implemented")
}
func (UnimplementedShopCartServiceServer) AddShopCartItem(context.Context, *ShopCartReq) (*CartItemRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddShopCartItem not implemented")
}
func (UnimplementedShopCartServiceServer) DeleteShopCart(context.Context, *DelShopCartItem) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShopCart not implemented")
}
func (UnimplementedShopCartServiceServer) UpdateShopCartItem(context.Context, *ShopCartReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShopCartItem not implemented")
}
func (UnimplementedShopCartServiceServer) mustEmbedUnimplementedShopCartServiceServer() {}
func (UnimplementedShopCartServiceServer) testEmbeddedByValue()                         {}

// UnsafeShopCartServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShopCartServiceServer will
// result in compilation errors.
type UnsafeShopCartServiceServer interface {
	mustEmbedUnimplementedShopCartServiceServer()
}

func RegisterShopCartServiceServer(s grpc.ServiceRegistrar, srv ShopCartServiceServer) {
	// If the following call pancis, it indicates UnimplementedShopCartServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShopCartService_ServiceDesc, srv)
}

func _ShopCartService_ShopCartItemList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopCartServiceServer).ShopCartItemList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopCartService_ShopCartItemList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopCartServiceServer).ShopCartItemList(ctx, req.(*AccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopCartService_AddShopCartItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShopCartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopCartServiceServer).AddShopCartItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopCartService_AddShopCartItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopCartServiceServer).AddShopCartItem(ctx, req.(*ShopCartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopCartService_DeleteShopCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelShopCartItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopCartServiceServer).DeleteShopCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopCartService_DeleteShopCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopCartServiceServer).DeleteShopCart(ctx, req.(*DelShopCartItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopCartService_UpdateShopCartItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShopCartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopCartServiceServer).UpdateShopCartItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopCartService_UpdateShopCartItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopCartServiceServer).UpdateShopCartItem(ctx, req.(*ShopCartReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ShopCartService_ServiceDesc is the grpc.ServiceDesc for ShopCartService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShopCartService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ShopCartService",
	HandlerType: (*ShopCartServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShopCartItemList",
			Handler:    _ShopCartService_ShopCartItemList_Handler,
		},
		{
			MethodName: "AddShopCartItem",
			Handler:    _ShopCartService_AddShopCartItem_Handler,
		},
		{
			MethodName: "DeleteShopCart",
			Handler:    _ShopCartService_DeleteShopCart_Handler,
		},
		{
			MethodName: "UpdateShopCartItem",
			Handler:    _ShopCartService_UpdateShopCartItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shopcart.proto",
}
